// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.3
// source: consts.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息号
type MSG_ID int32

const (
	MSG_ID_HEART                 MSG_ID = 0    // 心跳
	MSG_ID_LOGIN                 MSG_ID = 1    // 登录
	MSG_ID_LOUOUT                MSG_ID = 2    // 登出
	MSG_ID_MAIN_WAN_INFO_PUSH    MSG_ID = 3    // 所有主玩法信息
	MSG_ID_WAN_CHANG_INFO        MSG_ID = 4    // 通过主玩法ID 获取次玩法 及场次信息
	MSG_ID_CHOISE_WAN            MSG_ID = 5    // 选玩法
	MSG_ID_CHOISE_WAN_FAST       MSG_ID = 6    // 快速选玩法
	MSG_ID_SYNC_PLAYER_INFO_PUSH MSG_ID = 7    // 同步玩家信息 推送
	MSG_ID_ENTER_DESK_PUSH       MSG_ID = 2000 // 进入牌桌 推送
	MSG_ID_FA_PAI_PUSH           MSG_ID = 2001 // 发牌 推送
	MSG_ID_HUAN_PAI              MSG_ID = 2002 // 换三张
	MSG_ID_XUAN_QUE              MSG_ID = 2003 // 选缺
	MSG_ID_OUT_CARD              MSG_ID = 2004 // 出牌
	MSG_ID_PEND_PAI              MSG_ID = 2005 // 碰牌
	MSG_ID_GANG_PAI              MSG_ID = 2006 // 杠牌
	MSG_ID_CHI_PAI               MSG_ID = 2007 // 吃牌
	MSG_ID_HU_PAI                MSG_ID = 2008 // 胡牌
	MSG_ID_GUO_PAI               MSG_ID = 2009 // 过牌
	MSG_ID_REN_SHU               MSG_ID = 2010 // 认输
	MSG_ID_HUAN_PAI_START_PUSH   MSG_ID = 2011 // 换牌开始 推送
	MSG_ID_HUAN_PAI_DING_PUSH    MSG_ID = 2012 // 玩家选定换牌 推送
	MSG_ID_HUAN_PAI_END_PUSH     MSG_ID = 2013 // 换牌完成 推送
	MSG_ID_XUAN_QUE_START_PUSH   MSG_ID = 2014 // 选缺开始 推送
	MSG_ID_XUAN_QUE_DING_PUSH    MSG_ID = 2015 // 玩家选定缺门 推送
	MSG_ID_XUAN_QUE_END_PUSH     MSG_ID = 2016 // 选缺结束 推送
	MSG_ID_MO_PAI_PUSH           MSG_ID = 2017 // 通知玩家摸牌 推送
	MSG_ID_OUT_CARD_START_PUSH   MSG_ID = 2018 // 玩家开始出牌 推送
	MSG_ID_OUT_CARD_PUSH         MSG_ID = 2019 // 玩家出牌 推送
	MSG_ID_WAIT_CARD_PUSH        MSG_ID = 2020 // 等待玩家碰杠吃胡 推送
	MSG_ID_PENG_PAI_PUSH         MSG_ID = 2021 // 玩家碰 推送
	MSG_ID_GANG_PAI_PUSH         MSG_ID = 2022 // 玩家杠 推送
	MSG_ID_CHI_PAI_PUSH          MSG_ID = 2023 // 玩家吃 推送
	MSG_ID_QIANG_GANG_PUSH       MSG_ID = 2024 // 玩家被抢杠 推送
	MSG_ID_GANG_END_PUSH         MSG_ID = 2025 // 玩家杠结算 推送
	MSG_ID_HU_PUSH               MSG_ID = 2026 // 玩家胡 推送
	MSG_ID_REN_SHU_PUSH          MSG_ID = 2027 // 玩家认输 推送
	MSG_ID_OTHER_WIN_LOSS_PUSH   MSG_ID = 2028 // 其他输赢（退税、查花猪、查大叫） 推送
	MSG_ID_GAME_END_PUSH         MSG_ID = 2030 // 结算 推送
)

// Enum value maps for MSG_ID.
var (
	MSG_ID_name = map[int32]string{
		0:    "HEART",
		1:    "LOGIN",
		2:    "LOUOUT",
		3:    "MAIN_WAN_INFO_PUSH",
		4:    "WAN_CHANG_INFO",
		5:    "CHOISE_WAN",
		6:    "CHOISE_WAN_FAST",
		7:    "SYNC_PLAYER_INFO_PUSH",
		2000: "ENTER_DESK_PUSH",
		2001: "FA_PAI_PUSH",
		2002: "HUAN_PAI",
		2003: "XUAN_QUE",
		2004: "OUT_CARD",
		2005: "PEND_PAI",
		2006: "GANG_PAI",
		2007: "CHI_PAI",
		2008: "HU_PAI",
		2009: "GUO_PAI",
		2010: "REN_SHU",
		2011: "HUAN_PAI_START_PUSH",
		2012: "HUAN_PAI_DING_PUSH",
		2013: "HUAN_PAI_END_PUSH",
		2014: "XUAN_QUE_START_PUSH",
		2015: "XUAN_QUE_DING_PUSH",
		2016: "XUAN_QUE_END_PUSH",
		2017: "MO_PAI_PUSH",
		2018: "OUT_CARD_START_PUSH",
		2019: "OUT_CARD_PUSH",
		2020: "WAIT_CARD_PUSH",
		2021: "PENG_PAI_PUSH",
		2022: "GANG_PAI_PUSH",
		2023: "CHI_PAI_PUSH",
		2024: "QIANG_GANG_PUSH",
		2025: "GANG_END_PUSH",
		2026: "HU_PUSH",
		2027: "REN_SHU_PUSH",
		2028: "OTHER_WIN_LOSS_PUSH",
		2030: "GAME_END_PUSH",
	}
	MSG_ID_value = map[string]int32{
		"HEART":                 0,
		"LOGIN":                 1,
		"LOUOUT":                2,
		"MAIN_WAN_INFO_PUSH":    3,
		"WAN_CHANG_INFO":        4,
		"CHOISE_WAN":            5,
		"CHOISE_WAN_FAST":       6,
		"SYNC_PLAYER_INFO_PUSH": 7,
		"ENTER_DESK_PUSH":       2000,
		"FA_PAI_PUSH":           2001,
		"HUAN_PAI":              2002,
		"XUAN_QUE":              2003,
		"OUT_CARD":              2004,
		"PEND_PAI":              2005,
		"GANG_PAI":              2006,
		"CHI_PAI":               2007,
		"HU_PAI":                2008,
		"GUO_PAI":               2009,
		"REN_SHU":               2010,
		"HUAN_PAI_START_PUSH":   2011,
		"HUAN_PAI_DING_PUSH":    2012,
		"HUAN_PAI_END_PUSH":     2013,
		"XUAN_QUE_START_PUSH":   2014,
		"XUAN_QUE_DING_PUSH":    2015,
		"XUAN_QUE_END_PUSH":     2016,
		"MO_PAI_PUSH":           2017,
		"OUT_CARD_START_PUSH":   2018,
		"OUT_CARD_PUSH":         2019,
		"WAIT_CARD_PUSH":        2020,
		"PENG_PAI_PUSH":         2021,
		"GANG_PAI_PUSH":         2022,
		"CHI_PAI_PUSH":          2023,
		"QIANG_GANG_PUSH":       2024,
		"GANG_END_PUSH":         2025,
		"HU_PUSH":               2026,
		"REN_SHU_PUSH":          2027,
		"OTHER_WIN_LOSS_PUSH":   2028,
		"GAME_END_PUSH":         2030,
	}
)

func (x MSG_ID) Enum() *MSG_ID {
	p := new(MSG_ID)
	*p = x
	return p
}

func (x MSG_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSG_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[0].Descriptor()
}

func (MSG_ID) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[0]
}

func (x MSG_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSG_ID.Descriptor instead.
func (MSG_ID) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{0}
}

// 性别
type GENDER int32

const (
	GENDER_GENDER_UNDEFINED GENDER = 0 // 不使用
	GENDER_MALE             GENDER = 1 // 男
	GENDER_FEMALE           GENDER = 2 // 女
	GENDER_UNKNOW           GENDER = 3 // 保密
)

// Enum value maps for GENDER.
var (
	GENDER_name = map[int32]string{
		0: "GENDER_UNDEFINED",
		1: "MALE",
		2: "FEMALE",
		3: "UNKNOW",
	}
	GENDER_value = map[string]int32{
		"GENDER_UNDEFINED": 0,
		"MALE":             1,
		"FEMALE":           2,
		"UNKNOW":           3,
	}
)

func (x GENDER) Enum() *GENDER {
	p := new(GENDER)
	*p = x
	return p
}

func (x GENDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GENDER) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[1].Descriptor()
}

func (GENDER) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[1]
}

func (x GENDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GENDER.Descriptor instead.
func (GENDER) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{1}
}

// 结果
type RESULT int32

const (
	RESULT_SUCCESS RESULT = 0 // 成功
	RESULT_FAILED  RESULT = 1 // 失败
)

// Enum value maps for RESULT.
var (
	RESULT_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RESULT_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RESULT) Enum() *RESULT {
	p := new(RESULT)
	*p = x
	return p
}

func (x RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[2].Descriptor()
}

func (RESULT) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[2]
}

func (x RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESULT.Descriptor instead.
func (RESULT) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{2}
}

// 真假
type TRUE_FALSE int32

const (
	TRUE_FALSE_FALSE TRUE_FALSE = 0 // 假
	TRUE_FALSE_TRUE  TRUE_FALSE = 1 // 真
)

// Enum value maps for TRUE_FALSE.
var (
	TRUE_FALSE_name = map[int32]string{
		0: "FALSE",
		1: "TRUE",
	}
	TRUE_FALSE_value = map[string]int32{
		"FALSE": 0,
		"TRUE":  1,
	}
)

func (x TRUE_FALSE) Enum() *TRUE_FALSE {
	p := new(TRUE_FALSE)
	*p = x
	return p
}

func (x TRUE_FALSE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRUE_FALSE) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[3].Descriptor()
}

func (TRUE_FALSE) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[3]
}

func (x TRUE_FALSE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRUE_FALSE.Descriptor instead.
func (TRUE_FALSE) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{3}
}

// 玩法类型
type WAN_TYPE int32

const (
	WAN_TYPE_WAN_TYPE_UNDEFINED WAN_TYPE = 0  // 不使用
	WAN_TYPE_XL                 WAN_TYPE = 1  // 血流
	WAN_TYPE_XLBXP              WAN_TYPE = 2  // 血流不洗牌
	WAN_TYPE_HZXL               WAN_TYPE = 3  // 红中血流
	WAN_TYPE_HZXLBXP            WAN_TYPE = 4  // 红中血流不洗牌
	WAN_TYPE_XZDD               WAN_TYPE = 5  // 血战到底
	WAN_TYPE_XZDDBXP            WAN_TYPE = 6  // 血战到底不洗牌
	WAN_TYPE_HZXZDD             WAN_TYPE = 7  // 红中血战到底
	WAN_TYPE_HZXZDDBXP          WAN_TYPE = 8  // 红中血战到底不洗牌
	WAN_TYPE_GDMJ               WAN_TYPE = 9  // 广东麻将
	WAN_TYPE_GDMJBXP            WAN_TYPE = 10 // 广东麻将不洗牌
	WAN_TYPE_HNMJ               WAN_TYPE = 11 // 湖南麻将
	WAN_TYPE_HNMJBXP            WAN_TYPE = 12 // 湖南麻将不洗牌
	WAN_TYPE_DBMJ               WAN_TYPE = 13 // 东北麻将
	WAN_TYPE_DBMJBXP            WAN_TYPE = 14 // 东北麻将不洗牌
)

// Enum value maps for WAN_TYPE.
var (
	WAN_TYPE_name = map[int32]string{
		0:  "WAN_TYPE_UNDEFINED",
		1:  "XL",
		2:  "XLBXP",
		3:  "HZXL",
		4:  "HZXLBXP",
		5:  "XZDD",
		6:  "XZDDBXP",
		7:  "HZXZDD",
		8:  "HZXZDDBXP",
		9:  "GDMJ",
		10: "GDMJBXP",
		11: "HNMJ",
		12: "HNMJBXP",
		13: "DBMJ",
		14: "DBMJBXP",
	}
	WAN_TYPE_value = map[string]int32{
		"WAN_TYPE_UNDEFINED": 0,
		"XL":                 1,
		"XLBXP":              2,
		"HZXL":               3,
		"HZXLBXP":            4,
		"XZDD":               5,
		"XZDDBXP":            6,
		"HZXZDD":             7,
		"HZXZDDBXP":          8,
		"GDMJ":               9,
		"GDMJBXP":            10,
		"HNMJ":               11,
		"HNMJBXP":            12,
		"DBMJ":               13,
		"DBMJBXP":            14,
	}
)

func (x WAN_TYPE) Enum() *WAN_TYPE {
	p := new(WAN_TYPE)
	*p = x
	return p
}

func (x WAN_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WAN_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[4].Descriptor()
}

func (WAN_TYPE) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[4]
}

func (x WAN_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WAN_TYPE.Descriptor instead.
func (WAN_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{4}
}

// 消息ID段
type MSG_ID_PART int32

const (
	MSG_ID_PART_MSG_ID_PART_NONE  MSG_ID_PART = 0    // 未使用，没意义
	MSG_ID_PART_MSG_ID_PART_LOGIC MSG_ID_PART = 2000 // 逻辑服起始ID
)

// Enum value maps for MSG_ID_PART.
var (
	MSG_ID_PART_name = map[int32]string{
		0:    "MSG_ID_PART_NONE",
		2000: "MSG_ID_PART_LOGIC",
	}
	MSG_ID_PART_value = map[string]int32{
		"MSG_ID_PART_NONE":  0,
		"MSG_ID_PART_LOGIC": 2000,
	}
)

func (x MSG_ID_PART) Enum() *MSG_ID_PART {
	p := new(MSG_ID_PART)
	*p = x
	return p
}

func (x MSG_ID_PART) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSG_ID_PART) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[5].Descriptor()
}

func (MSG_ID_PART) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[5]
}

func (x MSG_ID_PART) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSG_ID_PART.Descriptor instead.
func (MSG_ID_PART) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{5}
}

// 杠的类型
type GANG_TYPE int32

const (
	GANG_TYPE_GANG_TYPE_NONE  GANG_TYPE = 0 // 无意义 不使用
	GANG_TYPE_GANG_TYPE_MING  GANG_TYPE = 1 // 明杠
	GANG_TYPE_GANG_TYPE_AN    GANG_TYPE = 2 // 暗杠
	GANG_TYPE_GANG_TYPE_GUOLU GANG_TYPE = 3 // 过路杠
)

// Enum value maps for GANG_TYPE.
var (
	GANG_TYPE_name = map[int32]string{
		0: "GANG_TYPE_NONE",
		1: "GANG_TYPE_MING",
		2: "GANG_TYPE_AN",
		3: "GANG_TYPE_GUOLU",
	}
	GANG_TYPE_value = map[string]int32{
		"GANG_TYPE_NONE":  0,
		"GANG_TYPE_MING":  1,
		"GANG_TYPE_AN":    2,
		"GANG_TYPE_GUOLU": 3,
	}
)

func (x GANG_TYPE) Enum() *GANG_TYPE {
	p := new(GANG_TYPE)
	*p = x
	return p
}

func (x GANG_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GANG_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_consts_proto_enumTypes[6].Descriptor()
}

func (GANG_TYPE) Type() protoreflect.EnumType {
	return &file_consts_proto_enumTypes[6]
}

func (x GANG_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GANG_TYPE.Descriptor instead.
func (GANG_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_consts_proto_rawDescGZIP(), []int{6}
}

var File_consts_proto protoreflect.FileDescriptor

var file_consts_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xdf,
	0x05, 0x0a, 0x06, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x55, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x4f, 0x49, 0x53,
	0x45, 0x5f, 0x57, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x4f, 0x49, 0x53,
	0x45, 0x5f, 0x57, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x53, 0x4b, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xd0, 0x0f, 0x12, 0x10, 0x0a,
	0x0b, 0x46, 0x41, 0x5f, 0x50, 0x41, 0x49, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xd1, 0x0f, 0x12,
	0x0d, 0x0a, 0x08, 0x48, 0x55, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x49, 0x10, 0xd2, 0x0f, 0x12, 0x0d,
	0x0a, 0x08, 0x58, 0x55, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x10, 0xd3, 0x0f, 0x12, 0x0d, 0x0a,
	0x08, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xd4, 0x0f, 0x12, 0x0d, 0x0a, 0x08,
	0x50, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x49, 0x10, 0xd5, 0x0f, 0x12, 0x0d, 0x0a, 0x08, 0x47,
	0x41, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x49, 0x10, 0xd6, 0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x48,
	0x49, 0x5f, 0x50, 0x41, 0x49, 0x10, 0xd7, 0x0f, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x55, 0x5f, 0x50,
	0x41, 0x49, 0x10, 0xd8, 0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x55, 0x4f, 0x5f, 0x50, 0x41, 0x49,
	0x10, 0xd9, 0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x55, 0x10, 0xda,
	0x0f, 0x12, 0x18, 0x0a, 0x13, 0x48, 0x55, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x49, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xdb, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x48,
	0x55, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x49, 0x5f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x10, 0xdc, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x55, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x49,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xdd, 0x0f, 0x12, 0x18, 0x0a, 0x13,
	0x58, 0x55, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x10, 0xde, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x58, 0x55, 0x41, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x5f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xdf, 0x0f, 0x12,
	0x16, 0x0a, 0x11, 0x58, 0x55, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x10, 0xe0, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x4f, 0x5f, 0x50, 0x41,
	0x49, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xe1, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x55, 0x54,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48,
	0x10, 0xe2, 0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x10, 0xe3, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xe4, 0x0f, 0x12, 0x12, 0x0a, 0x0d,
	0x50, 0x45, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x49, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xe5, 0x0f,
	0x12, 0x12, 0x0a, 0x0d, 0x47, 0x41, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x49, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x10, 0xe6, 0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x5f, 0x50, 0x41, 0x49, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x10, 0xe7, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x51, 0x49, 0x41, 0x4e, 0x47,
	0x5f, 0x47, 0x41, 0x4e, 0x47, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xe8, 0x0f, 0x12, 0x12, 0x0a,
	0x0d, 0x47, 0x41, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xe9,
	0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x55, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xea, 0x0f, 0x12,
	0x11, 0x0a, 0x0c, 0x52, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x55, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10,
	0xeb, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x4e, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xec, 0x0f, 0x12, 0x12, 0x0a, 0x0d,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xee, 0x0f,
	0x2a, 0x40, 0x0a, 0x06, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x10, 0x03, 0x2a, 0x21, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x21, 0x0a, 0x0a, 0x54, 0x52, 0x55, 0x45, 0x5f, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x2a, 0xc3, 0x01, 0x0a, 0x08, 0x57, 0x41, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x58, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x4c, 0x42, 0x58, 0x50, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x5a, 0x58, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x5a,
	0x58, 0x4c, 0x42, 0x58, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x5a, 0x44, 0x44, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x5a, 0x44, 0x44, 0x42, 0x58, 0x50, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x5a, 0x58, 0x5a, 0x44, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x5a,
	0x58, 0x5a, 0x44, 0x44, 0x42, 0x58, 0x50, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x44, 0x4d,
	0x4a, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x44, 0x4d, 0x4a, 0x42, 0x58, 0x50, 0x10, 0x0a,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x4e, 0x4d, 0x4a, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x4e,
	0x4d, 0x4a, 0x42, 0x58, 0x50, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x4d, 0x4a, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x42, 0x4d, 0x4a, 0x42, 0x58, 0x50, 0x10, 0x0e, 0x2a, 0x3b,
	0x0a, 0x0b, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x10, 0xd0, 0x0f, 0x2a, 0x5a, 0x0a, 0x09, 0x47,
	0x41, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x41, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x47, 0x41, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x55, 0x4f, 0x4c, 0x55, 0x10, 0x03, 0x42, 0x0b, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0xaa,
	0x02, 0x02, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consts_proto_rawDescOnce sync.Once
	file_consts_proto_rawDescData = file_consts_proto_rawDesc
)

func file_consts_proto_rawDescGZIP() []byte {
	file_consts_proto_rawDescOnce.Do(func() {
		file_consts_proto_rawDescData = protoimpl.X.CompressGZIP(file_consts_proto_rawDescData)
	})
	return file_consts_proto_rawDescData
}

var file_consts_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_consts_proto_goTypes = []interface{}{
	(MSG_ID)(0),      // 0: MSG_ID
	(GENDER)(0),      // 1: GENDER
	(RESULT)(0),      // 2: RESULT
	(TRUE_FALSE)(0),  // 3: TRUE_FALSE
	(WAN_TYPE)(0),    // 4: WAN_TYPE
	(MSG_ID_PART)(0), // 5: MSG_ID_PART
	(GANG_TYPE)(0),   // 6: GANG_TYPE
}
var file_consts_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_consts_proto_init() }
func file_consts_proto_init() {
	if File_consts_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consts_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consts_proto_goTypes,
		DependencyIndexes: file_consts_proto_depIdxs,
		EnumInfos:         file_consts_proto_enumTypes,
	}.Build()
	File_consts_proto = out.File
	file_consts_proto_rawDesc = nil
	file_consts_proto_goTypes = nil
	file_consts_proto_depIdxs = nil
}
